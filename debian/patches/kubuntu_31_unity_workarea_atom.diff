Description: Patch from Unity team, non standard so can not go upstream.
 In Unity-2d in MultiMonitor we need to set Struts (for the left panel) in the
 middle of the working area. This means that the specced _NET_WORKAREA is not
 enough since it can only report one rectangle and we end up with two
 disconnected working areas once we add a vertical strut in the left of the
 secondary monitor. For that we have the propietary _UNITY_NET_WORKAREA_REGION
 atom that returns multiple rectangle.
 .
 This patch adds support for this atom to QDesktopWidget::availableGeometry so
 the correct geometry is reported when using Unity-2d
Author: Albert Astals Cid albert.astals@ canonical.com
Fowarded: no


---
 src/gui/kernel/qapplication_x11.cpp   |    4 ++
 src/gui/kernel/qdesktopwidget_x11.cpp |   50 +++++++++++++++++++++++++++++++++-
 src/gui/kernel/qt_x11_p.h             |    1 
 3 files changed, 53 insertions(+), 2 deletions(-)

--- a/src/gui/kernel/qapplication_x11.cpp
+++ b/src/gui/kernel/qapplication_x11.cpp
@@ -220,6 +220,7 @@
     "_NET_SUPPORTED\0"
     "_NET_VIRTUAL_ROOTS\0"
     "_NET_WORKAREA\0"
+    "_UNITY_NET_WORKAREA_REGION\0"
 
     "_NET_MOVERESIZE_WINDOW\0"
     "_NET_WM_MOVERESIZE\0"
@@ -3919,7 +3920,8 @@
                 qt_get_net_supported();
             } else if (event->xproperty.atom == ATOM(_NET_VIRTUAL_ROOTS)) {
                 qt_get_net_virtual_roots();
-            } else if (event->xproperty.atom == ATOM(_NET_WORKAREA)) {
+            } else if (event->xproperty.atom == ATOM(_NET_WORKAREA) ||
+                       event->xproperty.atom == ATOM(_UNITY_NET_WORKAREA_REGION)) {
                 qt_desktopwidget_update_workarea();
 
                 // emit the workAreaResized() signal
--- a/src/gui/kernel/qdesktopwidget_x11.cpp
+++ b/src/gui/kernel/qdesktopwidget_x11.cpp
@@ -269,6 +269,11 @@
     return d->screens[screen];
 }
 
+bool sortRectanglesByAreaLessThan(const QRect &r1, const QRect &r2)
+{
+    return r1.width() * r1.height() < r2.width() * r2.height() ;
+}
+
 const QRect QDesktopWidget::availableGeometry(int screen) const
 {
     Q_D(const QDesktopWidget);
@@ -285,7 +290,50 @@
     if (d->workareas[screen].isValid())
         return d->workareas[screen];
 
-    if (X11->isSupportedByWM(ATOM(_NET_WORKAREA))) {
+    if (X11->isSupportedByWM(ATOM(_UNITY_NET_WORKAREA_REGION))) {
+        int x11Screen = isVirtualDesktop() ? DefaultScreen(X11->display) : screen;
+
+        Atom ret;
+        int format, e;
+        unsigned char *data = 0;
+        unsigned long nitems, after;
+
+        e = XGetWindowProperty(X11->display,
+                               QX11Info::appRootWindow(x11Screen),
+                               ATOM(_UNITY_NET_WORKAREA_REGION), 0, 1024, False, XA_CARDINAL,
+                               &ret, &format, &nitems, &after, &data);
+
+        QRegion workArea;
+        if (e == Success && ret == XA_CARDINAL &&
+            format == 32 && ((nitems % 4) == 0)) {
+            long *regionsRectangles = (long *) data;
+            for (unsigned long i = 0; i < nitems / 4; ++i) {
+                workArea += QRect(regionsRectangles[i * 4 + 0], regionsRectangles[i * 4 + 1], regionsRectangles[i * 4 + 2], regionsRectangles[i * 4 + 3]);
+            }
+        } else {
+            workArea = screenGeometry(screen);
+        }
+
+        if (isVirtualDesktop()) {
+            // intersect the workarea (which spawns all Xinerama screens) with the rect for the
+            // requested screen
+            workArea &= screenGeometry(screen);
+        }
+
+        QVector<QRect> rectangles = workArea.rects();
+        if (rectangles.isEmpty()) {
+            d->workareas[screen] = QRect();
+        } else {
+            // Since we can only return one rectangle, return the biggest
+            // Ideally there's only one rectangle anyway since people don't put struts in the middle of the screen
+            qSort(rectangles.begin(), rectangles.end(), sortRectanglesByAreaLessThan);
+
+            d->workareas[screen] = rectangles.last();
+        }
+
+        if (data)
+            XFree(data);
+    } else if (X11->isSupportedByWM(ATOM(_NET_WORKAREA))) {
         int x11Screen = isVirtualDesktop() ? DefaultScreen(X11->display) : screen;
 
         Atom ret;
--- a/src/gui/kernel/qt_x11_p.h
+++ b/src/gui/kernel/qt_x11_p.h
@@ -584,6 +584,7 @@
         _NET_SUPPORTED,
         _NET_VIRTUAL_ROOTS,
         _NET_WORKAREA,
+        _UNITY_NET_WORKAREA_REGION,
 
         _NET_MOVERESIZE_WINDOW,
         _NET_WM_MOVERESIZE,
