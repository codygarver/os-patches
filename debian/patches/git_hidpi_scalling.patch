From 047f030235972fdab5e15aff484006caf914216a Mon Sep 17 00:00:00 2001
From: Alexander Larsson <alexl@redhat.com>
Date: Mon, 01 Jul 2013 12:14:23 +0000
Subject: xsettings: Add support for window-scaling

We read the scale-factor gsettings and propagate to gdk, including doing
auto-detection if the setting is 0.

NOTE: The auto-detection code is currently disabled as enabling
scaling breaks gnome-shell. When this is fixed we want to enable this.

We also scale the old Xft.DPI setting by the window scale so that old
applications get a decent size on very high dpi monitors, plus we report the
unscaled dpi so that window scale aware apps (like gtk) can avoid this
dpi scaling.

We also scale the cursor theme size so that you will get matching sizes
for cursors.
---
Index: gnome-settings-daemon-3.8.6.1/plugins/xsettings/gsd-xsettings-manager.c
===================================================================
--- gnome-settings-daemon-3.8.6.1.orig/plugins/xsettings/gsd-xsettings-manager.c	2014-02-03 12:06:40.014501405 +0000
+++ gnome-settings-daemon-3.8.6.1/plugins/xsettings/gsd-xsettings-manager.c	2014-02-03 12:08:05.314504245 +0000
@@ -59,6 +59,8 @@
 #define GTK_MODULES_ENABLED_KEY  "enabled-gtk-modules"
 
 #define TEXT_SCALING_FACTOR_KEY "text-scaling-factor"
+#define SCALING_FACTOR_KEY "scaling-factor"
+#define CURSOR_SIZE_KEY "cursor-size"
 
 #define FONT_ANTIALIASING_KEY "antialiasing"
 #define FONT_HINTING_KEY      "hinting"
@@ -218,6 +220,8 @@
  */
 #define DPI_FALLBACK 96
 
+#define HIDPI_LIMIT (DPI_FALLBACK * 2)
+
 typedef struct _TranslationEntry TranslationEntry;
 typedef void (* TranslationFunc) (GnomeXSettingsManager *manager,
                                   TranslationEntry      *trans,
@@ -359,7 +363,7 @@
         { "org.gnome.desktop.interface", "menubar-accel",          "Gtk/MenuBarAccel",        translate_string_string },
         { "org.gnome.desktop.interface", "enable-animations",      "Gtk/EnableAnimations",    translate_bool_int },
         { "org.gnome.desktop.interface", "cursor-theme",           "Gtk/CursorThemeName",     translate_string_string },
-        { "org.gnome.desktop.interface", "cursor-size",            "Gtk/CursorThemeSize",     translate_int_int },
+        /* cursor-size is handled via the Xft side as it needs the scaling factor */
         { "org.gnome.desktop.interface", "show-input-method-menu", "Gtk/ShowInputMethodMenu", translate_bool_int },
         { "org.gnome.desktop.interface", "show-unicode-menu",      "Gtk/ShowUnicodeMenu",     translate_bool_int },
         { "org.gnome.desktop.interface", "automatic-mnemonics",    "Gtk/AutoMnemonics",       translate_bool_int },
@@ -408,10 +412,56 @@
         return dpi * factor;
 }
 
+static int
+get_window_scale (GnomeXSettingsManager *manager)
+{
+	GSettings  *interface_settings;
+        int window_scale;
+        GdkRectangle rect;
+        GdkDisplay *display;
+        GdkScreen *screen;
+        int width_mm, height_mm;
+        int monitor_scale;
+        double dpi_x, dpi_y;
+
+	interface_settings = g_hash_table_lookup (manager->priv->settings, INTERFACE_SETTINGS_SCHEMA);
+        window_scale =
+                g_settings_get_uint (interface_settings, SCALING_FACTOR_KEY);
+        if (window_scale == 0) {
+                display = gdk_display_get_default ();
+                screen = gdk_display_get_default_screen (display);
+                gdk_screen_get_monitor_geometry (screen, 0, &rect);
+                width_mm = gdk_screen_get_monitor_width_mm (screen, 0);
+                height_mm = gdk_screen_get_monitor_height_mm (screen, 0);
+                monitor_scale = gdk_screen_get_monitor_scale_factor (screen, 0);
+
+                window_scale = 1;
+                if (width_mm > 0 && height_mm > 0) {
+                        dpi_x = (double)rect.width * monitor_scale / (width_mm / 25.4);
+                        dpi_y = (double)rect.height * monitor_scale / (height_mm / 25.4);
+                        /* We don't completely trust these values so both
+                           must be high, and never pick higher ratio than
+                           2 automatically */
+                        if (dpi_x > HIDPI_LIMIT && dpi_y > HIDPI_LIMIT)
+                                window_scale = 2;
+                }
+
+                /* TODO: For now we don't support automatic scale picking, because it
+                   any scale but 1 breaks gnome-shell. Remove this when gnome-shell
+                   is fixed. */
+                window_scale = 1;
+        }
+
+        return window_scale;
+}
+
 typedef struct {
         gboolean    antialias;
         gboolean    hinting;
+        int         scaled_dpi;
         int         dpi;
+        int         window_scale;
+        int         cursor_size;
         const char *rgba;
         const char *hintstyle;
 } GnomeXftSettings;
@@ -421,10 +471,15 @@
 xft_settings_get (GnomeXSettingsManager *manager,
                   GnomeXftSettings      *settings)
 {
+	GSettings  *interface_settings;
         GsdFontAntialiasingMode antialiasing;
         GsdFontHinting hinting;
         GsdFontRgbaOrder order;
         gboolean use_rgba = FALSE;
+        double dpi;
+        int cursor_size;
+
+	interface_settings = g_hash_table_lookup (manager->priv->settings, INTERFACE_SETTINGS_SCHEMA);
 
         antialiasing = g_settings_get_enum (manager->priv->plugin_settings, FONT_ANTIALIASING_KEY);
         hinting = g_settings_get_enum (manager->priv->plugin_settings, FONT_HINTING_KEY);
@@ -432,7 +487,12 @@
 
         settings->antialias = (antialiasing != GSD_FONT_ANTIALIASING_MODE_NONE);
         settings->hinting = (hinting != GSD_FONT_HINTING_NONE);
-        settings->dpi = get_dpi_from_gsettings (manager) * 1024; /* Xft wants 1/1024ths of an inch */
+        settings->window_scale = get_window_scale (manager);
+        dpi = get_dpi_from_gsettings (manager);
+        settings->dpi = dpi * 1024; /* Xft wants 1/1024ths of an inch */
+        settings->scaled_dpi = dpi * settings->window_scale * 1024;
+        cursor_size = g_settings_get_int (interface_settings, CURSOR_SIZE_KEY);
+        settings->cursor_size = cursor_size * settings->window_scale;
         settings->rgba = "rgb";
         settings->hintstyle = "hintfull";
 
@@ -498,8 +558,11 @@
                 xsettings_manager_set_int (manager->priv->managers [i], "Xft/Antialias", settings->antialias);
                 xsettings_manager_set_int (manager->priv->managers [i], "Xft/Hinting", settings->hinting);
                 xsettings_manager_set_string (manager->priv->managers [i], "Xft/HintStyle", settings->hintstyle);
-                xsettings_manager_set_int (manager->priv->managers [i], "Xft/DPI", settings->dpi);
+                xsettings_manager_set_int (manager->priv->managers [i], "Gdk/WindowScalingFactor", settings->window_scale);
+                xsettings_manager_set_int (manager->priv->managers [i], "Gdk/UnscaledDPI", settings->dpi);
+                xsettings_manager_set_int (manager->priv->managers [i], "Xft/DPI", settings->scaled_dpi);
                 xsettings_manager_set_string (manager->priv->managers [i], "Xft/RGBA", settings->rgba);
+                xsettings_manager_set_int (manager->priv->managers [i], "Gtk/CursorThemeSize", settings->cursor_size);
         }
         gnome_settings_profile_end (NULL);
 }
@@ -552,7 +615,7 @@
         g_debug("xft_settings_set_xresources: orig res '%s'", add_string->str);
 
         update_property (add_string, "Xft.dpi",
-                                g_ascii_dtostr (dpibuf, sizeof (dpibuf), (double) settings->dpi / 1024.0));
+                                g_ascii_dtostr (dpibuf, sizeof (dpibuf), (double) settings->scaled_dpi / 1024.0));
         update_property (add_string, "Xft.antialias",
                                 settings->antialias ? "1" : "0");
         update_property (add_string, "Xft.hinting",
@@ -810,7 +873,8 @@
         guint             i;
         GVariant         *value;
 
-        if (g_str_equal (key, TEXT_SCALING_FACTOR_KEY)) {
+        if (g_str_equal (key, TEXT_SCALING_FACTOR_KEY) ||
+            g_str_equal (key, SCALING_FACTOR_KEY)) {
         	xft_callback (NULL, key, manager);
         	return;
 	}
