diff -Nur os-patch-indicator-sound-precise/data/com.canonical.indicator.sound.gschema.xml os-patch-indicator-sound-precise.new/data/com.canonical.indicator.sound.gschema.xml
--- os-patch-indicator-sound-precise/data/com.canonical.indicator.sound.gschema.xml	2012-10-07 19:13:29.791940000 +0100
+++ os-patch-indicator-sound-precise.new/data/com.canonical.indicator.sound.gschema.xml	2012-10-07 19:00:57.049852103 +0100
@@ -11,13 +11,20 @@
     </key>
     <key name="interested-media-players" type="as">
       <summary>A list of applications which at some point have registered with the sound menu</summary>
-      <default>[ 'rhythmbox' ]</default>
+      <default>['noise', 'beatbox', 'rhythmbox']</default>
       <description>
         Each media player which abides by the MPRIS2 spec will automatically appear in the menu.
         This array should contain the desktop file names (minus .desktop suffix) of applications which
         have at some point appeared in the menU. This allows the menu remember and display offlined applications.
       </description>
     </key>
+    <key name="preferred-media-players" type="as">
+      <summary>A list of applications that will have player controls visible all the time</summary>
+      <default>['noise', 'beatbox']</default>
+      <description>
+        A list of applications that will have player controls visible all the time
+      </description>
+    </key>
     <key name="global-mute" type="b">
       <default>false</default>
       <summary>Initial setting for global mute (mute all) on the menu </summary>
diff -Nur os-patch-indicator-sound-precise/src/metadata-widget.c os-patch-indicator-sound-precise.new/src/metadata-widget.c
--- os-patch-indicator-sound-precise/src/metadata-widget.c	2012-10-07 19:13:29.791940000 +0100
+++ os-patch-indicator-sound-precise.new/src/metadata-widget.c	2012-10-07 19:04:39.471757208 +0100
@@ -68,7 +68,8 @@
                                              GVariant* value,
                                              gpointer userdata);
 static void metadata_widget_style_labels ( MetadataWidget* self,
-                                           GtkLabel* label);
+                                           GtkLabel* label,
+                                           gchar* markup_str);
 static void draw_album_art_placeholder (GtkWidget *metadata);
 
 static void draw_album_border (GtkWidget *metadata, gboolean selected);
@@ -185,7 +186,7 @@
   gtk_widget_set_size_request (artist, 140, 15);
 
   gtk_label_set_ellipsize(GTK_LABEL(artist), PANGO_ELLIPSIZE_MIDDLE); 
-  metadata_widget_style_labels(self, GTK_LABEL(artist));
+  metadata_widget_style_labels(self, GTK_LABEL(artist), NULL);
   priv->artist_label = artist;
   
   // title
@@ -196,7 +197,7 @@
   
   gtk_widget_set_size_request (piece, 140, 15);
   gtk_label_set_ellipsize(GTK_LABEL(piece), PANGO_ELLIPSIZE_MIDDLE);
-  metadata_widget_style_labels(self, GTK_LABEL(piece));
+  metadata_widget_style_labels(self, GTK_LABEL(piece), "<b>%s</b>");
   priv->piece_label =  piece;
 
   // container
@@ -207,7 +208,7 @@
   gtk_widget_set_size_request (container, 140, 15);
 
   gtk_label_set_ellipsize(GTK_LABEL(container), PANGO_ELLIPSIZE_MIDDLE);  
-  metadata_widget_style_labels(self, GTK_LABEL(container));
+  metadata_widget_style_labels(self, GTK_LABEL(container), NULL);
   priv->container_label = container;
 
   gtk_box_pack_start (GTK_BOX (vbox), priv->piece_label, FALSE, FALSE, 0);  
@@ -717,15 +718,15 @@
   
   if(g_ascii_strcasecmp(DBUSMENU_METADATA_MENUITEM_ARTIST, property) == 0){  
     gtk_label_set_text(GTK_LABEL(priv->artist_label), g_variant_get_string(value, NULL));
-    metadata_widget_style_labels(mitem, GTK_LABEL(priv->artist_label));
+    metadata_widget_style_labels(mitem, GTK_LABEL(priv->artist_label), NULL);
   }
   else if(g_ascii_strcasecmp(DBUSMENU_METADATA_MENUITEM_TITLE, property) == 0){  
     gtk_label_set_text(GTK_LABEL(priv->piece_label), g_variant_get_string(value, NULL));    
-    metadata_widget_style_labels(mitem, GTK_LABEL(priv->piece_label));
+    metadata_widget_style_labels(mitem, GTK_LABEL(priv->piece_label), "<b>%s</b>");
   } 
   else if(g_ascii_strcasecmp(DBUSMENU_METADATA_MENUITEM_ALBUM, property) == 0){  
     gtk_label_set_text(GTK_LABEL(priv->container_label), g_variant_get_string(value, NULL));
-    metadata_widget_style_labels(mitem, GTK_LABEL(priv->container_label));
+    metadata_widget_style_labels(mitem, GTK_LABEL(priv->container_label), NULL);
   } 
   else if(g_ascii_strcasecmp(DBUSMENU_METADATA_MENUITEM_ARTURL, property) == 0){
     g_string_erase(priv->image_path, 0, -1);
@@ -760,11 +761,13 @@
 }
 
 static void
-metadata_widget_style_labels(MetadataWidget* self, GtkLabel* label)
+metadata_widget_style_labels(MetadataWidget* self, GtkLabel* label, char* markup_str)
 {
+  if (markup_str == NULL)
+    markup_str = "%s";
+
   char* markup;
-  markup = g_markup_printf_escaped ("<span size=\"smaller\">%s</span>",
-                                    gtk_label_get_text(GTK_LABEL(label)));
+  markup = g_markup_printf_escaped (markup_str, gtk_label_get_text(GTK_LABEL(label)));
   gtk_label_set_markup (GTK_LABEL (label), markup);
   g_free(markup); 
 }
@@ -822,16 +825,16 @@
   gtk_label_set_text( GTK_LABEL(priv->container_label), 
                       dbusmenu_menuitem_property_get( priv->twin_item,
                                                       DBUSMENU_METADATA_MENUITEM_ALBUM));
-  metadata_widget_style_labels( self, GTK_LABEL(priv->container_label));
+  metadata_widget_style_labels( self, GTK_LABEL(priv->container_label), NULL);
 
   gtk_label_set_text( GTK_LABEL(priv->piece_label), 
                       dbusmenu_menuitem_property_get( priv->twin_item,
                                                       DBUSMENU_METADATA_MENUITEM_TITLE));
-  metadata_widget_style_labels( self, GTK_LABEL(priv->piece_label));
+  metadata_widget_style_labels( self, GTK_LABEL(priv->piece_label), "<b>%s</b>");
   gtk_label_set_text( GTK_LABEL(priv->artist_label), 
                       dbusmenu_menuitem_property_get( priv->twin_item,
                                                       DBUSMENU_METADATA_MENUITEM_ARTIST));
-  metadata_widget_style_labels( self, GTK_LABEL(priv->artist_label));
+  metadata_widget_style_labels( self, GTK_LABEL(priv->artist_label), NULL);
 
   g_string_erase(priv->image_path, 0, -1);
   const gchar *arturl = dbusmenu_menuitem_property_get( priv->twin_item,
diff -Nur os-patch-indicator-sound-precise/src/music-player-bridge.vala os-patch-indicator-sound-precise.new/src/music-player-bridge.vala
--- os-patch-indicator-sound-precise/src/music-player-bridge.vala	2012-10-07 19:13:29.791940000 +0100
+++ os-patch-indicator-sound-precise.new/src/music-player-bridge.vala	2012-10-07 19:07:07.232670190 +0100
@@ -40,6 +40,7 @@
     this.file_monitors = new HashMap<string, string> ();
     this.settings_manager = new SettingsManager();
     this.settings_manager.blacklist_updates.connect ( this.on_blacklist_update );
+    this.settings_manager.preferred_updates.connect ( this.on_preferred_update );
   }
   
   private void on_blacklist_update ( string[] blacklist )
@@ -58,8 +59,26 @@
     this.watcher.check_for_active_clients.begin();
   }
 
+  private void on_preferred_update ( Gee.ArrayList<string> preferred )
+  {
+    debug ("Preferred players update. Clearing current preferred players...");
+
+    foreach (var player_controller in this.registered_clients.values) {
+      player_controller.set_as_preferred (false);
+    }
+
+    foreach (var s in preferred) {
+      string key = this.determine_key (s);
+      if (this.registered_clients.has_key (key)) {
+        debug ("Setting %s as preferred player", key);
+        this.registered_clients[key].set_as_preferred (true);
+      }
+    }
+  }
+
   private void try_to_add_inactive_familiar_clients()
   {
+    var preferred_players = this.settings_manager.fetch_preferred ();
     foreach ( string desktop in this.settings_manager.fetch_interested()){
       debug ( "interested client found : %s", desktop );
       AppInfo? app_info = create_app_info ( desktop.concat( ".desktop" ) );
@@ -68,14 +87,16 @@
                    desktop );
         continue;
       }
-      var mpris_key = determine_key ( desktop );
+      bool is_preferred = desktop in preferred_players;
       PlayerController ctrl = new PlayerController ( this.root_menu, 
                                                      app_info,
                                                      null,
                                                      this.fetch_icon_name(desktop),
                                                      calculate_menu_position(),
                                                      null,
-                                                     PlayerController.state.OFFLINE );
+                                                     PlayerController.state.OFFLINE,
+                                                     is_preferred );
+      var mpris_key = determine_key ( desktop );
       this.registered_clients.set(mpris_key, ctrl);  
       this.establish_file_monitoring (app_info, mpris_key);
     }
@@ -163,6 +184,7 @@
     }
     
     var mpris_key = determine_key ( desktop );
+    bool is_preferred = desktop in this.settings_manager.fetch_preferred ();
     // Are we sure clients will appear like this with the new registration method in place. 
     if ( this.registered_clients.has_key (mpris_key) == false ){
       debug("New client has registered that we have not seen before: %s", dbus_name );
@@ -172,7 +194,8 @@
                                                      this.fetch_icon_name(desktop),                                                    
                                                      this.calculate_menu_position(),
                                                      use_playlists,
-                                                     PlayerController.state.READY );
+                                                     PlayerController.state.READY,
+                                                     is_preferred );
       this.registered_clients.set ( mpris_key, ctrl );
       debug ( "Have not seen this %s before, new controller created.", desktop );        
       this.settings_manager.add_interested ( desktop );
diff -Nur os-patch-indicator-sound-precise/src/player-controller.vala os-patch-indicator-sound-precise.new/src/player-controller.vala
--- os-patch-indicator-sound-precise/src/player-controller.vala	2012-10-07 19:13:29.791940000 +0100
+++ os-patch-indicator-sound-precise.new/src/player-controller.vala	2012-10-07 19:09:00.633390891 +0100
@@ -49,6 +49,7 @@
   public int menu_offset { get; set;}
   public string icon_name { get; set; }
   public bool? use_playlists;
+  public bool is_preferred { get; private set; }
   private SpecificItemsManager track_specific_mgr;
   private SpecificItemsManager player_specific_mgr;
   
@@ -58,7 +59,8 @@
                           string icon_name,
                           int offset,
                           bool? use_playlists,
-                          state initial_state)
+                          state initial_state,
+                          bool is_preferred)
   {
     this.use_playlists = use_playlists;
     this.root_menu = root;
@@ -68,6 +70,7 @@
     this.custom_items = new ArrayList<PlayerItem>();
     this.current_state = initial_state;
     this.menu_offset = offset;
+    this.is_preferred = is_preferred;
     this.construct_widgets();
     this.establish_mpris_connection();
     this.update_layout();
@@ -156,6 +159,11 @@
     }
   }
 
+  public void set_as_preferred (bool val) {
+  	this.is_preferred = val;
+  	this.update_layout();
+  }
+
   public void hibernate()
   {
     update_state(PlayerController.state.OFFLINE);
@@ -175,12 +183,13 @@
       metadata_menuitem.should_collapse (true);
       playlists_menuitem.root_item.property_set_bool (MENUITEM_PROP_VISIBLE,
                                                       false);
-      this.custom_items[widget_order.TRANSPORT].property_set_bool (MENUITEM_PROP_VISIBLE,
-                                                                   this.app_info.get_id() == "rhythmbox.desktop");         
+      this.custom_items[widget_order.TRANSPORT].property_set_bool (MENUITEM_PROP_VISIBLE, is_preferred);   
       return; 
     }
-    metadata_menuitem.should_collapse (!this.custom_items[widget_order.METADATA].populated (MetadataMenuitem.relevant_attributes_for_ui()) );
-    if (this.app_info.get_id() == "rhythmbox.desktop"){
+    bool should_collapse = !this.custom_items[widget_order.METADATA].populated (MetadataMenuitem.relevant_attributes_for_ui());
+    metadata_menuitem.should_collapse (should_collapse);
+
+    if (is_preferred){
       TransportMenuitem transport = this.custom_items[widget_order.TRANSPORT] as TransportMenuitem;
       transport.handle_cached_action();
     }
diff -Nur os-patch-indicator-sound-precise/src/settings-manager.vala os-patch-indicator-sound-precise.new/src/settings-manager.vala
--- os-patch-indicator-sound-precise/src/settings-manager.vala	2012-10-07 19:13:29.791940000 +0100
+++ os-patch-indicator-sound-precise.new/src/settings-manager.vala	2012-10-07 19:10:50.410199022 +0100
@@ -22,12 +22,14 @@
 {
   private Settings settings;
   public signal void blacklist_updates ( string[] new_blacklist );
+  public signal void preferred_updates (Gee.ArrayList<string> new_preferred);
   
   public SettingsManager ( ){
   }
   construct{
     this.settings = new Settings ("com.canonical.indicator.sound");
     this.settings.changed["blacklisted-media-players"].connect (on_blacklist_event);    
+    this.settings.changed["preferred-media-players"].connect (on_preferred_event);
   }
    
   public string[] fetch_blacklist()
@@ -35,9 +37,24 @@
     return this.settings.get_strv ("blacklisted-media-players");
   }
 
+  public ArrayList<string> fetch_preferred()
+  {
+    var list = new ArrayList<string>();
+
+    var preferred = this.settings.get_strv ("preferred-media-players");
+    var interested = fetch_interested ();
+
+    foreach (var s in preferred) {
+      if (!(s in list) && interested.contains (s))
+        list.add (s);
+    }
+
+    return list;
+  }
+
   public ArrayList<string> fetch_interested()
   {
-    var blacklisted = this.settings.get_strv ("blacklisted-media-players");
+    var blacklisted = fetch_blacklist ();
     var interested = this.settings.get_strv ("interested-media-players");
     var list = new ArrayList<string>();
     foreach(var s in interested){
@@ -91,6 +108,11 @@
     this.blacklist_updates(this.settings.get_strv ("blacklisted-media-players"));        
   }
 
+  private void on_preferred_event()
+  {
+    this.preferred_updates (this.fetch_preferred());
+  }
+
   // Convenient debug method inorder to provide visability over 
   // the contents of both interested and blacklisted containers in its gsettings
 /**
diff -Nur os-patch-indicator-sound-precise/src/sound-service-dbus.c os-patch-indicator-sound-precise.new/src/sound-service-dbus.c
--- os-patch-indicator-sound-precise/src/sound-service-dbus.c	2012-10-07 19:13:29.791940000 +0100
+++ os-patch-indicator-sound-precise.new/src/sound-service-dbus.c	2012-10-07 19:12:47.651078783 +0100
@@ -79,8 +79,11 @@
 static void sound_service_dbus_dispose    (GObject *object);
 static void sound_service_dbus_finalize   (GObject *object);
 
+#ifdef HAVE_SETTINGS_MENU_ITEM
 static void show_sound_settings_dialog (DbusmenuMenuitem *mi,
                                         gpointer user_data);
+#endif
+
 static gboolean sound_service_dbus_blacklist_player (SoundServiceDbus* self,
                                                      const gchar* player_name,
                                                      gboolean blacklist); 
@@ -195,6 +198,7 @@
   dbusmenu_menuitem_child_add_position (priv->root_menuitem, slider_item, 1);
   dbusmenu_menuitem_child_add_position (priv->root_menuitem, voip_input_menu_item, 2);
 
+#ifdef HAVE_SETTINGS_MENU_ITEM
   if (!priv->greeter_mode) {
     // Separator
     DbusmenuMenuitem* separator = dbusmenu_menuitem_new();
@@ -216,8 +220,10 @@
     g_signal_connect(G_OBJECT(settings_mi), DBUSMENU_MENUITEM_SIGNAL_ITEM_ACTIVATED,
                      G_CALLBACK(show_sound_settings_dialog), NULL);  
   }
+#endif
 }
 
+#ifdef HAVE_SETTINGS_MENU_ITEM
 /**
 show_sound_settings_dialog:
 Bring up the gnome volume preferences dialog
@@ -235,6 +241,7 @@
     g_error_free(error);
   }
 }
+#endif
 
 static void
 sound_service_dbus_dispose (GObject *object)
